@using HorasExtra.Blazor.PagesServices
@using HorasExtra.Application.ViewModels

@page "/horas"
@attribute [Authorize]
@inject HorasPageService HorasPageService
@inject UsuarioPageService UsuarioPageService

<div class="row">
    <div class="col-md-10">
        <h1>Apontamento de Horas Extras</h1>
    </div>
    <div class="col-md-2 alinhamento-direira">
        <a href="/horas/cadastrar" class="btn btn-success">Novo</a>
    </div>
</div>

<AuthorizeView Roles="Admin">
    <div class="container row top-15">
        <EditForm OnValidSubmit="@Listar" Model="@horasListarRequestViewModel">
            <ChildContent Context="Form">
                <div class="form-row">
                    <div class="col-md-10">
                        <InputSelect id="desenvolvedor" @bind-Value="horasListarRequestViewModel.Desenvolvedor" class="form-control">
                            <option value="">Selecione</option>
                            @foreach (var desenvolvedor in desenvolvedores)
                            {
                                <option value="@desenvolvedor.Nome">@desenvolvedor.Nome</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-primary mb-2">Buscar</button>
                    </div>
                </div>
            </ChildContent>
        </EditForm>
    </div>
</AuthorizeView>

<div class="row top-15">
    <div class="col-12 table-responsive">
        @if (horas == null)
        {
            <p><em>carregando...</em></p>
        }
        else if (horas.Count() == 0)
        {
            <p><em>Nenhum registro encontrado</em></p>
        }
        else
        {
            <table class="table">
                <thead class="thead-light">
                    <tr>
                        <th>Desenvolvedor</th>
                        <th>Data</th>
                        <th>Hora Inicio</th>
                        <th>Hora Fim</th>
                        <th>Total</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (HorasObterResponseViewModel hora in horas)
                    {
                        <tr>
                            <td>@hora.Desenvolvedor</td>
                            <td>@hora.Data.ToShortDateString()</td>
                            <td>@hora.HoraInicio</td>
                            <td>@hora.HoraFim</td>
                            <td>
                                @{
                                    var horaInicio = new DateTime(2000, 01, 01, Convert.ToInt32(hora.HoraInicio.Split(':')[0]), Convert.ToInt32(hora.HoraInicio.Split(':')[1]), 0);
                                    var horaFim = new DateTime(2000, 01, 01, Convert.ToInt32(hora.HoraFim.Split(':')[0]), Convert.ToInt32(hora.HoraFim.Split(':')[1]), 0);
                                    TimeSpan totalHorasExtrasDiaTimeSpan = horaFim - horaInicio;
                                    Double totalHorasExtrasDia = Math.Round(totalHorasExtrasDiaTimeSpan.TotalHours);
                                    totalHorasExtras += totalHorasExtrasDia;

                                } @totalHorasExtrasDia.ToString("0.##")
                            </td>
                            <td class="alinhamento-direira">
                                <a class="btn btn-primary" href="/horas/cadastrar/@hora.Id">Editar</a>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="4">Total</td>
                        <td>@totalHorasExtras.ToString("0.##")</td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private System.Security.Claims.ClaimsPrincipal claimsPrincipal;
    private List<HorasObterResponseViewModel> horas = new List<HorasObterResponseViewModel>(0);
    private double totalHorasExtras = 0;
    private HorasListarRequestViewModel horasListarRequestViewModel = new HorasListarRequestViewModel();
    private List<UsuarioObterResponseViewModel> desenvolvedores = new List<UsuarioObterResponseViewModel>();

    protected override async void OnInitialized()
    {
        if (authenticationState != null)
        {
            claimsPrincipal = (await authenticationState).User;
        }

        desenvolvedores = UsuarioPageService.Listar();
        horas = HorasPageService.Listar(new HorasListarRequestViewModel { Desenvolvedor = claimsPrincipal.Identity.Name });
        base.OnInitialized();
    }

    private void Listar()
    {
        horas = HorasPageService.Listar(horasListarRequestViewModel);
    }
}
